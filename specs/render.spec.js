
/**
 * Generated by https://github.com/dsheiko/puppetry
 * on Mon Jul 29 2019 19:48:26 GMT+0530 (IST)
 * Suite: render
 */

var nVer = process.version.match( /^v(\d+)/ );
if ( !nVer || nVer[ 1 ] < 9 ) {
  console.error( "WARNING: You have an outdated Node.js version " + process.version
    + ". You need at least v.9.x to run this test suite." );
}


const {
        bs, util, fetch, localStorage
      } = require( "../lib/bootstrap" )( "render" ),
      devices = require( "puppeteer/DeviceDescriptors" );



jest.setTimeout( 50000 );

// Environment variables
const ENV = {

};

const DEPARTMENTS = ['EEE', 'MECH', 'CSE', 'CIVIL'];
const SECTIONS = ['A', 'B', 'C'];

const testFormDetails = async (options) => {
  let {
    title,
    labelText = [],
    selectData = [],
    submitValue,
    hasTextInput = true
  } = options || {};

  let bodyText = await bs.page.$eval('body', el => el.innerText)
  expect(bodyText).toContain(title);
  
  labelText.forEach(async (label, index) => {
    let LabelTextValue = await bs.page.$eval(`label:nth-of-type(${index + 1})`, el => el.innerText)
    expect(LabelTextValue).toContain(label);

  })

  selectData.forEach(async (select, index) => {
    let selectText = await bs.page.$eval(`select:nth-of-type(${index + 1})`, el => el.innerText)
    let iterator = select === 'department' ? DEPARTMENTS : SECTIONS;
    iterator.forEach((dept) => {
      expect(selectText).toContain(dept)
    })
  })

  if (hasTextInput) {
    expect(await bs.page.$('input[type=text]')).toBeTruthy();
  }

  let SubmitText = await bs.page.$eval('input[type=submit]', el => el.value)
  expect(SubmitText).toContain(submitValue);
}

const REQUEST_DEPARTMENT_CHANGE = async () => bs.query( "a[href='req_dept_change.html']", "REQUEST_DEPARTMENT_CHANGE" );
const ENROLL_DEPARTMENT = async () => bs.query( "a[href='enroll_dept.html']", "ENROLL_DEPARTMENT" );
const CHANGE_SECTION = async () => bs.query( "a[href='req_section_change.html']", "CHANGE_SECTION" );
const VIEW_DETAILS = async () => bs.query( "a[href='view_details.html']", "VIEW_DETAILS" );
const VIEW_DEPARTMENT_DETAILS = async () => bs.query( "a[href='view_dept_details.html']", "VIEW_DEPARTMENT_DETAILS" );
const VIEW_STUDENT_DETAILS = async () => bs.query( "a[href='view_student_details.html']", "VIEW_STUDENT_DETAILS" );
const BACK_TO_INDEX = async () => bs.query( "a[href='index.html']", "BACK_TO_INDEX" );
const BACK_TO_VIEW_DETAILS = async () => bs.query( "a[href='view_details.html']", "BACK_TO_VIEW_DETAILS" );


const readRootConfig = function() {
  let { filename } = module;
  let [root] = filename.split('specs/render.spec');
  return `file://${root}src/index.html`;
};

const indexLink = readRootConfig();

describe( "render", async () => {
  beforeAll(async () => {
    await bs.setup();
  });

  afterAll(async () => {
    await bs.teardown();
  });


  describe( "Check Page Linking", async () => {

    test( "Enroll Department Links", async () => {
      let result, assert;

      // Navigating to file:///Users/user/milestone-tests/src/index.html
      await bs.page.goto(indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );
    
      // Emulating mouse click
      await ( await ENROLL_DEPARTMENT() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    
      expect(await bs.page.$('form')).toBeTruthy();
      expect(await bs.page.$('label')).toBeTruthy();
      expect(await bs.page.$('input')).toBeTruthy();

      // Emulating mouse click
      await ( await BACK_TO_INDEX() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    });

    test( "Enroll Department Links - Details in form", async () => {
      let result, assert;

      // Navigating to file:///Users/user/milestone-tests/src/index.html
      await bs.page.goto(indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );
    
      // Emulating mouse click
      await ( await ENROLL_DEPARTMENT() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );

      await testFormDetails({
        title: 'ENROLL INTO A DEPARTMENT',
        labelText: ['Name', 'Department'],
        submitValue: 'Register',
        selectData: ['department']
      });
    });


    test( "Request Department Change", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await REQUEST_DEPARTMENT_CHANGE() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    
      expect(await bs.page.$('form')).toBeTruthy();
      expect(await bs.page.$('label')).toBeTruthy();
      expect(await bs.page.$('input')).toBeTruthy();

      // Emulating mouse click
      await ( await BACK_TO_INDEX() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    });

    test( "Request Department Change - Details in form", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await REQUEST_DEPARTMENT_CHANGE() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );

      await testFormDetails({
        title: 'REQUEST DEPARTMENT CHANGE',
        labelText: ['Name', 'Department'],
        submitValue: 'Request',
        selectData: ['department']        
      });
    });

    test( "Request Section Change", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await CHANGE_SECTION() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      
      expect(await bs.page.$('form')).toBeTruthy();
      expect(await bs.page.$('label')).toBeTruthy();
      expect(await bs.page.$('input')).toBeTruthy();

      // Emulating mouse click
      await ( await BACK_TO_INDEX() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    });


    test( "Request Section Change - Details in form", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await CHANGE_SECTION() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );

      await testFormDetails({
        title: 'REQUEST SECTION CHANGE',
        labelText: ['Roll Number', 'Select Section'],
        submitValue: 'Request',
        selectData: ['section']
      });
    });

    test( "View Details", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await VIEW_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
          
      // Emulating mouse click
      await ( await BACK_TO_INDEX() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      
    });



    test( "View Details - Department", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await VIEW_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    
      // Emulating mouse click
      await ( await VIEW_DEPARTMENT_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );


      expect(await bs.page.$('form')).toBeTruthy();
      expect(await bs.page.$('label')).toBeTruthy();
      // Emulating mouse click
      await ( await BACK_TO_VIEW_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );

    });


    test( "View Details - Department - Check Form", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await VIEW_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    
      // Emulating mouse click
      await ( await VIEW_DEPARTMENT_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );


      await testFormDetails({
        title: 'FETCH DEPARTMENT DETAILS',
        labelText: ['Department', 'Section'],
        submitValue: 'Get List',
        selectData: ['department', 'section'],
        hasTextInput: false
      });
    });


    test( "View Details - Student", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await VIEW_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );

      
      // Emulating mouse click
      await ( await VIEW_STUDENT_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );

      expect(await bs.page.$('form')).toBeTruthy();
      expect(await bs.page.$('label')).toBeTruthy();
      expect(await bs.page.$('input')).toBeTruthy();
      // Emulating mouse click
      await ( await BACK_TO_VIEW_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
    });

    test( "View Details - Student - Check form", async () => {
      let result, assert;

      await bs.page.goto( indexLink, {"timeout":3000,"waitUntil":"domcontentloaded"} );

      // Emulating mouse click
      await ( await VIEW_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );

      
      // Emulating mouse click
      await ( await VIEW_STUDENT_DETAILS() ).click( {"button":"left"} );

      // Waiting for the given event
      await bs.page.waitForNavigation( {"timeout":3000,"waitUntil":"domcontentloaded"} );
      await testFormDetails({
        title: 'FETCH STUDENT DETAILS',
        labelText: ['Roll Number'],
        submitValue: 'Request',
      });
    });
  });


});
